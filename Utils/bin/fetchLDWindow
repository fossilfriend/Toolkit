"""
fetches LD window by querying directly against DB/requires access to NIAGADS GenomicsDB & gus.config file

TODO: Update to use REST API instead of direct access

"""

from __future__ import print_function
from __future__ import with_statement

import argparse

import sys

from Toolkit.Utils.postgres_dbi import Database
from Toolkit.Utils.utils import warning, xstr, qw

LD_SQL="""
SELECT MIN(position) AS start
, MAX(position) AS end
, REPLACE(chromosome, 'chr', '') || ':' || MIN(position)::text || '-' || MAX(position)::text AS ld_block
, MAX(position) - MIN(position) AS block_size
FROM NIAGADS.Variant nv, FilteredLinkage ld
WHERE nv.variant_id = ld.variant_id
GROUP BY chromosome

UNION -- case if no LD

SELECT MIN(position) AS start
, MAX(position) AS end
, REPLACE(chromosome, 'chr', '') || ':' || MIN(position)::text || '-' || MAX(position)::text AS ld_block
, MAX(position) - MIN(position) AS block_size
FROM NIAGADS.Variant nv, variant v
WHERE v.variant_id = nv.variant_id
AND NOT EXISTS (SELECT * FROM FilteredLinkage)
GROUP BY chromosome
"""

def build_sql_cte():
    """ build CTEs for the query"""
    
    sql="""
    WITH 
    Variant AS (SELECT %s::text AS variant_label, variant_id FROM (SELECT find_variant_id(%s::text) AS variant_id) a),

    Population AS (SELECT protocol_app_node_id FROM Study.ProtocolAppNode WHERE source_id = '1000GenomesLD_' || %s::text),

    Linkage AS (SELECT * 
    FROM Results.VariantLD ld, variant v
    WHERE ARRAY[v.variant_id::integer] <@ variants),
"""
    sql = sql + " FilteredLinkage AS (" + build_filtered_linkage_sql() + ")"

    return sql


def build_filtered_linkage_sql():
    ''' build SQL for filtering the linkage results '''
    sql = "SELECT DISTINCT unnest(ld.variants) AS variant_id FROM Linkage ld, Population p WHERE p.protocol_app_node_id = ld.protocol_app_node_id"
    sql = sql + " AND ld.r_squared >= %s::numeric"
    if args.maf:
        sql = sql + " AND minor_allele_frequency <= ARRAY[%s::float]"

    return sql


def build_sql():
    """ build full sql """
    return build_sql_cte() + " " + LD_SQL


def fetch_LD():
    """ fetch the LD and output"""
    header = qw('lead_SNP ld_window_start ld_window_end ld_block ld_block_size')
    with open(args.output, 'w') as fh:
        print('\t'.join(header), file=fh)
        with database.cursor() as cursor:
            for variant in variants:
                if args.verbose: warning(variant)
                if args.maf:
                    cursor.execute(build_sql(), (variant, variant, args.pop, args.r2, args.maf))
                else:
                    cursor.execute(build_sql(), (variant, variant, args.pop, args.r2))
                for record in cursor:
                    print('\t'.join(record.insert(0, variant)), file=fh)
                    

def parse_snp_list():
    """ transform comma separated snp list into array"""
    return split(args.snps, ',')

def parse_snp_file():
    """ read in snps from file and return array"""
    return open(args.snpFile).read().splitlines()
                

def validate_args():
    if args.snps is None and args.snpFile is None:
        warning("Must specify SNPs for LD window by either supplying a comma separated list of SNPs or an input file.")
        parser.print_help(sys.stderr)
        sys.exit(1)
        
if __name__ == "__main__":
    """fetch LD Window"""
    parser = argparse.ArgumentParser("Query against NIAGADS GenomicsDB to find LD windows for each SNP in an input list")
    parser.add_argument('--snps', help="comma separated list of one or more SNPs, specified either by rsID or metaseq (chr:pos:ref:alt) identifier; must specify this or provide --snpFile")
    parser.add_argument('-s', '--snpFile', help="full path to file containing newline separated list of SNPs specified using either rsIDor metaseq identifier; must specify this or provide --snps")
    parser.add_argument('--r2', help="LD r2 filter", default=0.5, type=float)
    parser.add_argument('--maf', help="LD maf filter", type=float)
    parser.add_argument('-o', '--output', help="full path to output file", required=True)
    parser.add_arugment('--pop', help="1000 Genomes superpopulation", choices=["EUR", "AMR", "AFR", "EAS", "SAS"], default="EUR")
    parser.add_arugment('--verbose', action='store_true')
    parser.add_arugment('--gusConfigFile', help="GUS config file. If not provided, assumes default: $GUS_HOME/conf/gus.config")

    args = parser.parse_args()
    validate_args()

    variants = parse_snp_list() if args.snps else parse_snp_file()
    

    database =  Database(args.gusConfigFile)
    database.connect()
    fetch_LD()

    database.close()
